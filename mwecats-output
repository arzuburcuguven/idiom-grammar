* (lg "mwecats")

======================= l o a d i n g =======================================

Project [mwecats] is assumed to consist of
-----------------------------------------------------------------------------
  CCG grammar source : mwecats.ccg $
    Its token form   : mwecats.lisptokens $
  Deduction grammar  : mwecats.ded $ (derived from mwecats.lisptokens)
  Induction grammar  : mwecats.ind #
  Supervision source : mwecats.sup ^
  Model-specific code: mwecats.lisp ^
   and other model-specific files you may create.
       *CCG-GRAMMAR* : set from mwecats.ded
  *LEX-RULES-TABLE*  : set from mwecats.ded
Expected files       : $ for deduction, # for induction, ^ for model development
=============================================================================
T
* (load "mwecats.testsuite.lisp")

T
* (test-ders)


  do (rules) or (onoff) for rules and switches
  ---------------------------
  Any non-standard rule     ? NO
  Currently loaded grammar  : mwecats.ded
 *CCG-GRAMMAR*              : 72 items
 *LEX-RULES-TABLE*          : 0 items
 *CKY-HASHTABLE*            : 6 items
 *CKY-INPUT* for the table  : (ONUN OCAĞıNA DÜŞTÜ) 
  Most likely LF w/weight   : NIL 
  Its most likely derivation: NIL
  Sum of weighted counts    : 0.0 
  Most likely LF's cells    : NIL 
  Number of differing LFs   : 0 
  Most weighted derivation  : NIL 
  ---------------------------

"CCGlab, version 6.0.1"
=======
1
========


Derivation 1
--------------
LEX   (AYŞE) := NP
        : AYŞE
LEX   (ONA) := (S\NP)/((S\NP)\NP)
        : (LAM P (P ONA))
LEX   (ÇAMUR) := NP
        : ÇAMUR
LEX   (ATTı) := ((S\NP)\NP)\NP
        : (LAM X (LAM Y (LAM Z (((((MADE _) X) SLANDER) Y) Z))))
<     (ÇAMUR)(ATTı) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z (((((MADE _) X) SLANDER) Y) Z)))) ÇAMUR)
>     (ONA)(ÇAMUR ATTı) := S\NP
        : ((LAM P (P ONA))
           ((LAM X (LAM Y (LAM Z (((((MADE _) X) SLANDER) Y) Z)))) ÇAMUR))
<     (AYŞE)(ONA ÇAMUR ATTı) := S
        : (((LAM P (P ONA))
            ((LAM X (LAM Y (LAM Z (((((MADE _) X) SLANDER) Y) Z)))) ÇAMUR))
           AYŞE)

Final LF, normal-order evaluated: 

    (((((MADE _) ÇAMUR) SLANDER) ONA) AYŞE) =
    (MADE _ ÇAMUR SLANDER ONA AYŞE)

Derivation 2
--------------
LEX   (AYŞE) := S/(S\NP)
        : (LAM P (P AYSE))
LEX   (ONA) := (S\NP)/((S\NP)\NP)
        : (LAM P (P ONA))
LEX   (ÇAMUR) := NP
        : ÇAMUR
LEX   (ATTı) := ((S\NP)\NP)\NP
        : (LAM X (LAM Y (LAM Z (((((MADE _) X) SLANDER) Y) Z))))
<     (ÇAMUR)(ATTı) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z (((((MADE _) X) SLANDER) Y) Z)))) ÇAMUR)
>     (ONA)(ÇAMUR ATTı) := S\NP
        : ((LAM P (P ONA))
           ((LAM X (LAM Y (LAM Z (((((MADE _) X) SLANDER) Y) Z)))) ÇAMUR))
>     (AYŞE)(ONA ÇAMUR ATTı) := S
        : ((LAM P (P AYSE))
           ((LAM P (P ONA))
            ((LAM X (LAM Y (LAM Z (((((MADE _) X) SLANDER) Y) Z)))) ÇAMUR)))

Final LF, normal-order evaluated: 

    (((((MADE _) ÇAMUR) SLANDER) ONA) AYSE) =
    (MADE _ ÇAMUR SLANDER ONA AYSE)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
2
========


Derivation 1
--------------
LEX   (AYŞE) := NP
        : AYŞE
LEX   (NALLARı) := N
        : NALLARı
LEX   (DIKTI) := (S\NP)\*(NALLARı)
        : (LAM X (LAM Y (LAM Z ((((DIED _) X) Y) Z))))
<     (NALLARı)(DIKTI) := S\NP
        : ((LAM X (LAM Y (LAM Z ((((DIED _) X) Y) Z)))) NALLARı)
<     (AYŞE)(NALLARı DIKTI) := S
        : (((LAM X (LAM Y (LAM Z ((((DIED _) X) Y) Z)))) NALLARı) AYŞE)

Final LF, normal-order evaluated: 

    (LAM Z ((((DIED _) NALLARı) AYŞE) Z)) =
    (\ Z . DIED _ NALLARı AYŞE Z)

Derivation 2
--------------
LEX   (AYŞE) := S/(S\NP)
        : (LAM P (P AYSE))
LEX   (NALLARı) := N
        : NALLARı
LEX   (DIKTI) := (S\NP)\*(NALLARı)
        : (LAM X (LAM Y (LAM Z ((((DIED _) X) Y) Z))))
<     (NALLARı)(DIKTI) := S\NP
        : ((LAM X (LAM Y (LAM Z ((((DIED _) X) Y) Z)))) NALLARı)
>     (AYŞE)(NALLARı DIKTI) := S
        : ((LAM P (P AYSE))
           ((LAM X (LAM Y (LAM Z ((((DIED _) X) Y) Z)))) NALLARı))

Final LF, normal-order evaluated: 

    (LAM Z ((((DIED _) NALLARı) AYSE) Z)) =
    (\ Z . DIED _ NALLARı AYSE Z)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
2
========


Derivation 1
--------------
LEX   (AYŞE) := NP
        : AYŞE
LEX   (ONU) := (S\NP)/((S\NP)\NP)
        : (LAM P (P ONU))
LEX   (BAŞTAN) := N
        : BAŞTAN
LEX   (ÇıKARDı) := ((S\NP)\NP)\*(BAŞTAN)
        : (LAM X (LAM Y (LAM Z ((((SEDUCED _) X) Y) Z))))
<     (BAŞTAN)(ÇıKARDı) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z ((((SEDUCED _) X) Y) Z)))) BAŞTAN)
>     (ONU)(BAŞTAN ÇıKARDı) := S\NP
        : ((LAM P (P ONU))
           ((LAM X (LAM Y (LAM Z ((((SEDUCED _) X) Y) Z)))) BAŞTAN))
<     (AYŞE)(ONU BAŞTAN ÇıKARDı) := S
        : (((LAM P (P ONU))
            ((LAM X (LAM Y (LAM Z ((((SEDUCED _) X) Y) Z)))) BAŞTAN))
           AYŞE)

Final LF, normal-order evaluated: 

    ((((SEDUCED _) BAŞTAN) ONU) AYŞE) =
    (SEDUCED _ BAŞTAN ONU AYŞE)

Derivation 2
--------------
LEX   (AYŞE) := S/(S\NP)
        : (LAM P (P AYSE))
LEX   (ONU) := (S\NP)/((S\NP)\NP)
        : (LAM P (P ONU))
LEX   (BAŞTAN) := N
        : BAŞTAN
LEX   (ÇıKARDı) := ((S\NP)\NP)\*(BAŞTAN)
        : (LAM X (LAM Y (LAM Z ((((SEDUCED _) X) Y) Z))))
<     (BAŞTAN)(ÇıKARDı) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z ((((SEDUCED _) X) Y) Z)))) BAŞTAN)
>     (ONU)(BAŞTAN ÇıKARDı) := S\NP
        : ((LAM P (P ONU))
           ((LAM X (LAM Y (LAM Z ((((SEDUCED _) X) Y) Z)))) BAŞTAN))
>     (AYŞE)(ONU BAŞTAN ÇıKARDı) := S
        : ((LAM P (P AYSE))
           ((LAM P (P ONU))
            ((LAM X (LAM Y (LAM Z ((((SEDUCED _) X) Y) Z)))) BAŞTAN)))

Final LF, normal-order evaluated: 

    ((((SEDUCED _) BAŞTAN) ONU) AYSE) =
    (SEDUCED _ BAŞTAN ONU AYSE)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
4
========

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
5
========


Derivation 1
--------------
LEX   (AYŞE) := NP
        : AYŞE
LEX   (ONA) := (S\NP)/((S\NP)\NP)
        : (LAM P (P ONA))
LEX   (KAPAĞı) := N
        : KAPAĞı
LEX   (ATTı) := ((S\NP)\NP)\*(KAPAĞı)
        : (LAM X (LAM Y (LAM Z ((((((TOOK REFUGE) IN) _) X) Y) Z))))
<     (KAPAĞı)(ATTı) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z ((((((TOOK REFUGE) IN) _) X) Y) Z)))) KAPAĞı)
>     (ONA)(KAPAĞı ATTı) := S\NP
        : ((LAM P (P ONA))
           ((LAM X (LAM Y (LAM Z ((((((TOOK REFUGE) IN) _) X) Y) Z)))) KAPAĞı))
<     (AYŞE)(ONA KAPAĞı ATTı) := S
        : (((LAM P (P ONA))
            ((LAM X (LAM Y (LAM Z ((((((TOOK REFUGE) IN) _) X) Y) Z))))
             KAPAĞı))
           AYŞE)

Final LF, normal-order evaluated: 

    ((((((TOOK REFUGE) IN) _) KAPAĞı) ONA) AYŞE) =
    (TOOK REFUGE IN _ KAPAĞı ONA AYŞE)

Derivation 2
--------------
LEX   (AYŞE) := S/(S\NP)
        : (LAM P (P AYSE))
LEX   (ONA) := (S\NP)/((S\NP)\NP)
        : (LAM P (P ONA))
LEX   (KAPAĞı) := N
        : KAPAĞı
LEX   (ATTı) := ((S\NP)\NP)\*(KAPAĞı)
        : (LAM X (LAM Y (LAM Z ((((((TOOK REFUGE) IN) _) X) Y) Z))))
<     (KAPAĞı)(ATTı) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z ((((((TOOK REFUGE) IN) _) X) Y) Z)))) KAPAĞı)
>     (ONA)(KAPAĞı ATTı) := S\NP
        : ((LAM P (P ONA))
           ((LAM X (LAM Y (LAM Z ((((((TOOK REFUGE) IN) _) X) Y) Z)))) KAPAĞı))
>     (AYŞE)(ONA KAPAĞı ATTı) := S
        : ((LAM P (P AYSE))
           ((LAM P (P ONA))
            ((LAM X (LAM Y (LAM Z ((((((TOOK REFUGE) IN) _) X) Y) Z))))
             KAPAĞı)))

Final LF, normal-order evaluated: 

    ((((((TOOK REFUGE) IN) _) KAPAĞı) ONA) AYSE) =
    (TOOK REFUGE IN _ KAPAĞı ONA AYSE)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
=======
6
========


Derivation 1
--------------
LEX   (AYŞE) := NP
        : AYŞE
LEX   (ONUN) := (S\NP)/((S\NP)\NP)
        : (LAM P (P ONUN))
LEX   (OCAĞıNA) := N
        : OCAĞıNA
LEX   (DÜŞTÜ) := ((S\NP)\NP)\*(OCAĞıNA)
        : (LAM X (LAM Y (LAM Z ((((((IS AT) MERCY) _) X) Y) Z))))
<     (OCAĞıNA)(DÜŞTÜ) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z ((((((IS AT) MERCY) _) X) Y) Z)))) OCAĞıNA)
>     (ONUN)(OCAĞıNA DÜŞTÜ) := S\NP
        : ((LAM P (P ONUN))
           ((LAM X (LAM Y (LAM Z ((((((IS AT) MERCY) _) X) Y) Z)))) OCAĞıNA))
<     (AYŞE)(ONUN OCAĞıNA DÜŞTÜ) := S
        : (((LAM P (P ONUN))
            ((LAM X (LAM Y (LAM Z ((((((IS AT) MERCY) _) X) Y) Z)))) OCAĞıNA))
           AYŞE)

Final LF, normal-order evaluated: 

    ((((((IS AT) MERCY) _) OCAĞıNA) ONUN) AYŞE) =
    (IS AT MERCY _ OCAĞıNA ONUN AYŞE)

Derivation 2
--------------
LEX   (AYŞE) := S/(S\NP)
        : (LAM P (P AYSE))
LEX   (ONUN) := (S\NP)/((S\NP)\NP)
        : (LAM P (P ONUN))
LEX   (OCAĞıNA) := N
        : OCAĞıNA
LEX   (DÜŞTÜ) := ((S\NP)\NP)\*(OCAĞıNA)
        : (LAM X (LAM Y (LAM Z ((((((IS AT) MERCY) _) X) Y) Z))))
<     (OCAĞıNA)(DÜŞTÜ) := (S\NP)\NP
        : ((LAM X (LAM Y (LAM Z ((((((IS AT) MERCY) _) X) Y) Z)))) OCAĞıNA)
>     (ONUN)(OCAĞıNA DÜŞTÜ) := S\NP
        : ((LAM P (P ONUN))
           ((LAM X (LAM Y (LAM Z ((((((IS AT) MERCY) _) X) Y) Z)))) OCAĞıNA))
>     (AYŞE)(ONUN OCAĞıNA DÜŞTÜ) := S
        : ((LAM P (P AYSE))
           ((LAM P (P ONUN))
            ((LAM X (LAM Y (LAM Z ((((((IS AT) MERCY) _) X) Y) Z)))) OCAĞıNA)))

Final LF, normal-order evaluated: 

    ((((((IS AT) MERCY) _) OCAĞıNA) ONUN) AYSE) =
    (IS AT MERCY _ OCAĞıNA ONUN AYSE)

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
NIL

